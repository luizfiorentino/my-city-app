import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import UserForm from "@/components/User/IssueForm/UserForm";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta
          name="og:description"
          content="Submit an issue to the Municipality"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.externalContainer}>
        <UserForm />
      </main>
    </>
  );
}

// export async function getServerSideProps() {
//   const issues = await prisma.issue.findMany();
//   return { props: { data: { issues: serialize(issues) } } };
// }

// import Head from "next/head";
// import { useState } from "react";
// import { Inter } from "next/font/google";
// import styles from "@/styles/Home.module.css";
// import UserForm from "@/components/userForm/UserForm";
// import AdminList from "@/components/adminList/AdminList";
// import prisma from "@/prisma/client";
// import serialize from "@/utils/serialize";

// const inter = Inter({ subsets: ["latin"] });

// export default function Home({ data }) {
//   //console.log("data:", data);
//   const [adminMode, setAdminMode] = useState(false);

//   const issues = data.issues.map((issue) => issue.description);
//   console.log("issues", data, "adminMode", adminMode);
//   return (
//     <>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//       <main>
//         <h1>My city app</h1>{" "}
//         <button onClick={() => setAdminMode(!adminMode)}>
//           {adminMode === false ? "admin mode" : "user mode"}
//         </button>
//         {adminMode === false ? (
//           <UserForm />
//         ) : (
//           <AdminList data={data.issues} issues={issues} />
//         )}
//         {/* <UserForm /> */}
//       </main>
//     </>
//   );
// }

// export async function getServerSideProps() {
//   const issues = await prisma.issue.findMany();
//   return { props: { data: { issues: serialize(issues) } } };
// }
